// CodeGear C++Builder
// Copyright (c) 1995, 2014 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'DUnitX.WeakReference.pas' rev: 28.00 (Windows)

#ifndef Dunitx_WeakreferenceHPP
#define Dunitx_WeakreferenceHPP

#pragma delphiheader begin
#pragma option push
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#pragma pack(push,8)
#include <System.hpp>	// Pascal unit
#include <SysInit.hpp>	// Pascal unit

//-- user supplied -----------------------------------------------------------

namespace Dunitx
{
namespace Weakreference
{
//-- type declarations -------------------------------------------------------
__interface IWeakReferenceableObject;
typedef System::DelphiInterface<IWeakReferenceableObject> _di_IWeakReferenceableObject;
__interface  INTERFACE_UUID("{3D7F9CB5-27F2-41BF-8C5F-F6195C578755}") IWeakReferenceableObject  : public System::IInterface 
{
	
public:
	virtual void __fastcall AddWeakRef(void * value) = 0 ;
	virtual void __fastcall RemoveWeakRef(void * value) = 0 ;
	virtual int __fastcall GetRefCount(void) = 0 ;
};

class DELPHICLASS TWeakReferencedObject;
#pragma pack(push,4)
class PASCALIMPLEMENTATION TWeakReferencedObject : public System::TObject
{
	typedef System::TObject inherited;
	
private:
	typedef System::DynamicArray<void *> _TWeakReferencedObject__1;
	
	
protected:
	_TWeakReferencedObject__1 FWeakReferences;
	int FRefCount;
	HRESULT __stdcall QueryInterface(const GUID &IID, /* out */ void *Obj);
	int __stdcall _AddRef(void);
	int __stdcall _Release(void);
	void __fastcall AddWeakRef(void * value);
	void __fastcall RemoveWeakRef(void * value);
	int __fastcall GetRefCount(void);
	
public:
	virtual void __fastcall AfterConstruction(void);
	virtual void __fastcall BeforeDestruction(void);
	__classmethod virtual System::TObject* __fastcall NewInstance();
	__property int RefCount = {read=FRefCount, nodefault};
public:
	/* TObject.Create */ inline __fastcall TWeakReferencedObject(void) : System::TObject() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TWeakReferencedObject(void) { }
	
private:
	void *__IWeakReferenceableObject;	// IWeakReferenceableObject 
	
public:
	#if defined(MANAGED_INTERFACE_OPERATORS)
	// {3D7F9CB5-27F2-41BF-8C5F-F6195C578755}
	operator _di_IWeakReferenceableObject()
	{
		_di_IWeakReferenceableObject intf;
		GetInterface(intf);
		return intf;
	}
	#else
	operator IWeakReferenceableObject*(void) { return (IWeakReferenceableObject*)&__IWeakReferenceableObject; }
	#endif
	#if defined(MANAGED_INTERFACE_OPERATORS)
	// {00000000-0000-0000-C000-000000000046}
	operator System::_di_IInterface()
	{
		System::_di_IInterface intf;
		GetInterface(intf);
		return intf;
	}
	#else
	operator System::IInterface*(void) { return (System::IInterface*)&__IWeakReferenceableObject; }
	#endif
	
};

#pragma pack(pop)

template<typename T> __interface IWeakReference__1;
// template<typename T> typedef System::DelphiInterface<IWeakReference__1<T> > _di_IWeakReference__1;
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> __interface  INTERFACE_UUID("{A6B88944-15A2-4FFD-B755-1B17960401BE}") IWeakReference__1  : public System::IInterface 
{
	
public:
	virtual bool __fastcall IsAlive(void) = 0 ;
	virtual T __fastcall Data(void) = 0 ;
};

template<typename T> class DELPHICLASS TWeakReference__1;
#pragma pack(push,4)
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TWeakReference__1 : public System::TInterfacedObject
{
	typedef System::TInterfacedObject inherited;
	
private:
	System::TObject* FData;
	
protected:
	bool __fastcall IsAlive(void);
	T __fastcall Data(void);
	
public:
	__fastcall TWeakReference__1(const T data);
	__fastcall virtual ~TWeakReference__1(void);
private:
	void *__IWeakReference__1;	// IWeakReference__1<T> 
	
public:
	#if defined(MANAGED_INTERFACE_OPERATORS)
	// {A6B88944-15A2-4FFD-B755-1B17960401BE}
	operator System::DelphiInterface<IWeakReference__1<T> >()
	{
		System::DelphiInterface<IWeakReference__1<T> > intf;
		GetInterface(intf);
		return intf;
	}
	#else
	operator IWeakReference__1<T>*(void) { return (IWeakReference__1<T>*)&__IWeakReference__1; }
	#endif
	
};

#pragma pack(pop)

//-- var, const, procedure ---------------------------------------------------
}	/* namespace Weakreference */
}	/* namespace Dunitx */
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_DUNITX_WEAKREFERENCE)
using namespace Dunitx::Weakreference;
#endif
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_DUNITX)
using namespace Dunitx;
#endif
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// Dunitx_WeakreferenceHPP
